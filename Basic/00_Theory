Code would be executed line by line

If u want to go through documentations search for mdn after the keyword

Specifications of JS could be found on tc39.es



STATICALLY TYPED LANGUAGES
You must tell the compiler the type of each variable before using it.
If type doesn’t match, it throws an error before running.

DYANAMICALLY TYPED LANGUAGES
You don’t declare types – the interpreter figures it out.
If type error happens, it crashes only while running.



-> IF WE USE TYPEOF IN FOLLOWING:-
1. Undefined = undefined
2. Null = object
3. Boolean = boolean
4. Number = number
5. Object (native and does not implement) = object
6. Object (native or host and does implement) = function
7. Object (host and does not implement) = object


-> DATATYPES

PRIMITIVE:-
1. Number - 2 to the power 53
2. BigInt
3. String
4. Boolean - T/F
5. Null - represents emptiness
6. Undefined - value not assigned yet
7. Symbol - uniqueness


NON PRIMITIVE or REFERENCE
1. Array
2. Objects - like Dictionaries
3. Functions

all non primitive have datatype as "function" and Function's datatype is objfunc

*******************************************************************************
MEMORY
1. Stack - in primitive (copy memory)
2. Heap - in non primitive (og changes)

> Stack is stacked in one by one and if a=1, b=a, b=3
The result would be a = 1, b = 3

> Heap is like if a = 1, b = a, b = 3
The result would be a = 3, b = 3



************************************************************************
WAY TO GO THROUGH PROTOTYPES in console(inspect mode)

>const GameName = new String('NealKumawat')
>GameName

>const balance = new Number(340)
>balance

>console.log(Math)
**********************************************************************************************


JAVASCRIPT EXECUTION CONTEXT
i. GLOBAL EXECUTION CONTEXT - by .this
ii. FUNCTIONAL EXECUTION CONTEXT
iii. EVAL EXECUTION CONTEXT (part of GEC)

First phase is MEMORY CREATION PHASE and then is EXECUTION PHASE


Let's understand via an eg:


let val1 = 10;
let val2 = 5;
function addNum(n1, n2){
    let total = n1 + n2
    return total
}
let result = addNum(val1, val2)
let result2 = addNum(10,2)



Now what is happening here is when we run this code GEC takes place.
Every variable is stored first with the same value 'undefined'
For eg:
    val1: undefined
    val2: undefined
    addNum: defination
    result: undefined
    result2: undefined

Now comes the execution phase
Here is the allocation of values in the variables
For eg:
    val1: 10
    val2: 5
    # function: NO WORK HERE
    
    result: it is a function so a new EXECUTION PHASE (new executional context) is created for this in which again Memory Phase and Execution Phase would take place
    So here in Memory Phase
        val1: undefined
        val2: undefined
        total: undefined
    Now Execution Phase
        n1:  10
        n2: 5
        total: 15 (this value is returned to GEC)
    SO AT FINAL WE HAVE result: 15
    and this Executional Context is deleted after value return to function

    SIMILARLY WITH THE result2

******************************************************************************************************************************************************
CALL STACK
Imagine a narrow bucket. It is actually the Global Execution Context
If u call a function then the function goes into the bucket and then after the work is done it exits

Now if there is another function used in the first function then it is stacked over the first function.
Sabse upar uska hi execution context h toh wo hi sabse pehle bahar niklega (LIFO)




JUST REMEMBER (for browser console)
false == 0      #true
false == ''     #true
0 == ''         #true


+,-,*,/ are arithmatic operators
<, >, ==, etc are relational or comparision operators
&&